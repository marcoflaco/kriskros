var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* eslint-disable no-param-reassign, prefer-const */

import { createRequestError } from './createRequestError';


function runFetch(req) {
  let { url } = req,
      opts = _objectWithoutProperties(req, ['url']);

  if (!url) {
    if (req.relayReqType === 'batch-query') {
      url = '/graphql/batch';
    } else {
      url = '/graphql';
    }
  }

  return fetch(url, opts).then(res => {
    if (res.status < 200 || res.status >= 300) {
      return res.text().then(text => {
        const err = new Error(text);
        err.fetchResponse = res;
        throw err;
      });
    }
    return res;
  }).then(res => {
    return res.json().then(payload => {
      return _extends({}, res, { payload });
    });
  });
}

export default function fetchWithMiddleware(req, middlewares) {
  const wrappedFetch = compose(...middlewares)(runFetch);

  return wrappedFetch(req).then(res => {
    const { payload } = res;
    if (!payload || payload.hasOwnProperty('errors') || !payload.hasOwnProperty('data')) {
      throw createRequestError(req, res);
    }
    return payload.data;
  });
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose(...funcs) {
  if (funcs.length === 0) {
    return arg => arg;
  } else {
    const last = funcs[funcs.length - 1];
    const rest = funcs.slice(0, -1);
    return (...args) => rest.reduceRight((composed, f) => f(composed), last(...args));
  }
}