'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = fetchWithMiddleware;

var _createRequestError = require('./createRequestError');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
/* eslint-disable no-param-reassign, prefer-const */

function runFetch(req) {
  var url = req.url,
      opts = _objectWithoutProperties(req, ['url']);

  if (!url) {
    if (req.relayReqType === 'batch-query') {
      url = '/graphql/batch';
    } else {
      url = '/graphql';
    }
  }

  return fetch(url, opts).then(function (res) {
    if (res.status < 200 || res.status >= 300) {
      return res.text().then(function (text) {
        var err = new Error(text);
        err.fetchResponse = res;
        throw err;
      });
    }
    return res;
  }).then(function (res) {
    return res.json().then(function (payload) {
      return _extends({}, res, { payload: payload });
    });
  });
}

function fetchWithMiddleware(req, middlewares) {
  var wrappedFetch = compose.apply(undefined, _toConsumableArray(middlewares))(runFetch);

  return wrappedFetch(req).then(function (res) {
    var payload = res.payload;

    if (!payload || payload.hasOwnProperty('errors') || !payload.hasOwnProperty('data')) {
      throw (0, _createRequestError.createRequestError)(req, res);
    }
    return payload.data;
  });
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  } else {
    var last = funcs[funcs.length - 1];
    var rest = funcs.slice(0, -1);
    return function () {
      return rest.reduceRight(function (composed, f) {
        return f(composed);
      }, last.apply(undefined, arguments));
    };
  }
}